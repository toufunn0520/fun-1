/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> getAllElements(TreeNode root1, TreeNode root2) {
        Queue<Integer> q1 = new LinkedList<>();
        Queue<Integer> q2 = new LinkedList<>();

        inorder(root1, q1);
        inorder(root2, q2);
        
        List<Integer> res = new ArrayList<>();
       

        while(!q1.isEmpty() || !q2.isEmpty()) {
            if (q1.isEmpty()) {
                res.addAll(q2);
                break;
            } else if (q2.isEmpty()) {
                res.addAll(q1);
                break;
            } else {
                res.add(q1.peek() < q2.peek() ? q1.poll() : q2.poll());
            }
        }
        
            
        return res;

    }
    
    
    public void inorder(final TreeNode node, Queue<Integer> res) {
        if (node == null) {
            return;
        }
        inorder(node.left, res);
        res.add(node.val);
        inorder(node.right, res);
    }
}
