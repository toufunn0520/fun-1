class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        int n = matrix.length;
        PriorityQueue<Tuple> q = new PriorityQueue<Tuple>();
        
        // insert the 1st row into queue
        for (int j = 0; j < n ; j++) {
            q.offer(new Tuple(0, j, matrix[0][j]));
        }
        
        // k-1 poll
        for (int i = 0; i < k -1; i++) {
            Tuple t = q.poll();
            if (t.x == n -1 ) continue;
           // keep offer  item from the same colomn
            q.offer(new Tuple(t.x+1, t.y, matrix[t.x + 1][t.y]));
        }
        //last kth poll
        return q.poll().val;
    }
    
    class Tuple implements Comparable<Tuple> {
        int x, y, val;
        public Tuple(int x, int y, int val) {
            this.x = x;
            this.y = y;
            this.val = val;
        }
        @Override
        public int compareTo (Tuple that) {
            return this.val - that.val;
        }
    }
}
