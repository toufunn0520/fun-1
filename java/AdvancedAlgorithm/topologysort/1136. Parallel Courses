//Time & space: O(V + E).


class Solution {
    public int minimumSemesters(int n, int[][] relations) {
        Map<Integer, List<Integer>> req = new HashMap<>();  // key: prerequisite, value: course list. 
        int[] inDegree = new int[n + 1]; // inDegree[i]: number of prerequisites for i.
        
        for (int[] r: relations) {
            req.computeIfAbsent(r[0], i -> new ArrayList<>()).add(r[1]); // construct graph.
             ++inDegree[r[1]]; // count prerequisites for r[1].
        }
        
        Queue<Integer> q = new LinkedList<>();
        for (int i = 1; i <= n; ++i) {
            if (inDegree[i] == 0) {
                q.offer(i);
            }
        }
        
        int semester = 0;
        while (!q.isEmpty()) { 
           for (int sz = q.size(); sz > 0; sz --) {
               int c = q.poll();
               n--;
               if (!req.containsKey(c)) continue; // c's in-degree is currently 0, but it has no prerequisite.
                for (int course : req.remove(c))
                    if (--inDegree[course] == 0) // decrease the in-degree of course's neighbors.
                        q.offer(course); // add current 0 in-degree vertex into Queue.
            }
            ++semester; // need one more semester.
           } 
        return n == 0 ? semester : -1;
    }
}
