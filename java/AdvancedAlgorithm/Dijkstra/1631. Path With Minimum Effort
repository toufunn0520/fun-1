// Time 
// Space 
// Dijkstra + DFS

class Solution {
    int [] direction = new int[]{0, 1, 0,-1, 0};
    public int minimumEffortPath(int[][] heights) {
        int m = heights.length, n = heights[0].length;
        // the minimal cost to reach (m,n)
        int[][] dist = new int[m][n];
        for (int i = 0; i < m; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
        }
        
        PriorityQueue<int[]> minHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        minHeap.offer(new int[]{0, 0, 0});
        
        while (!minHeap.isEmpty()) {
            int[] top = minHeap.poll();
            int d = top[0], r = top[1], c = top[2];
            if (d > dist[r][c]) continue; // this path is not the smallest, just skip it.
            if (r == m -1 && c == n-1) return d;
            // 4 directions
            for (int i = 0; i < 4; i++) {
                int nr = r + direction[i], nc = c + direction[i+1];
                // valid node on the matrix
                if (nr >= 0 && nr < m && nc >=0 && nc < n) {
                    int newDist = Math.max(d, Math.abs(heights[nr][nc] - heights[r][c]));
                    if (dist[nr][nc] > newDist) { // find smaller one, push to the array
                        dist[nr][nc] = newDist;
                        minHeap.offer(new int[]{dist[nr][nc], nr, nc});
                    }
                }
            }
        }
        
        return 0; // Unreachable code, Java require to return interger value.
    }
}

