// Time Complexity: O(N)O(N) where NN is the length of the string. Each of two checks of whether some substring is a palindrome is O(N)O(N).

// Space Complexity: O(1)O(1) additional complexity. Only pointers were stored in memory.
// two pointer
class Solution {
    public boolean validPalindrome(String s) {
        for (int i = 0; i < s.length()/2; i++) {
            if (s.charAt(i) != s.charAt(s.length() - 1 -i)) {
                int j = s.length() - 1 - i;
                return (internal(s, i+1, j) || internal(s, i , j -1));
            }
        }
        
        return true;
    }

    // check if string is palindrome from i to j 
    public boolean internal(String s , int i , int j) {
        for (int k = i; k <= i + (j - i) / 2 ; k++) {
            if (s.charAt(k) != s.charAt(j - k + i)) {
                return false;
            }
            
        }
        return true;
    }
}
