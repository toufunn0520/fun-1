// To sort people O(NlogN) time. Then one proceeds to n insert operations, and O(k) time
//Space O(N) to keep the output.

class Solution {
    public int[][] reconstructQueue(int[][] people) {
        Arrays.sort(people, new Comparator<int[]>() {
            // if the heights are equal put hiher at the front
            // if heights same put number lower at the front. 
            @Override
            public int compare(int[] o1, int [] o2) {
                return o1[0] == o2[0]? o1[1] - o2[1] : o2[0] - o1[0];
            }
        });
        
        
        int n = people.length;
        ArrayList<int[]> tmp = new ArrayList<>();
        // smaller element need to insert based on its ki value
        for (int i = 0; i < n; i++)
            tmp.add(people[i][1], new int[]{people[i][0], people[i][1]});

        int[][] res = new int[people.length][2];
        int i = 0;
        for (int[] k : tmp) {
            res[i][0] = k[0];
            res[i++][1] = k[1];
        }
        
        return res;
    }
}

