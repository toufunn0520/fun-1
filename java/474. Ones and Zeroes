// dp 
//Time complexity : O(l*m*n)O(l∗m∗n). Three nested loops are their, where ll is the length of strsstrs, mm and nn are the number of zeroes and ones respectively.
// Space complexity : O(m*n)O(m∗n). dpdp array of size m*nm∗n is used.
class Solution {
    public int findMaxForm(String[] strs, int m, int n) {
        int[][] dp = new int[m+1][n+1];
        for (String s: strs) {
            int[] count = countzerosones(s);
            for (int zeroes = m; zeroes >= count[0]; zeroes--)
                for (int ones = n; ones >= count[1]; ones--)
                    dp[zeroes][ones] = Math.max(1 + dp[zeroes - count[0]][ones - count[1]], dp[zeroes][ones]);
        }
        return dp[m][n];
    }
    // put 0 and 1 counter to the array
    private int[] countzerosones(String s) {
        int[] c = new int[2];
        for (int i = 0; i < s.length(); i++) {
            c[s.charAt(i) - '0'] ++;
        }
        return c;
    }
}
