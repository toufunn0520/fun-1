// Greedy
// Create empty Stack 
// Each time, we'll try to pop the elements from as many as possibile popped.
// In the end, we we'll check if stack is empty.
// Time O(n) Space O(n)
class Solution {
    public boolean validateStackSequences(int[] pushed, int[] popped) {
        Stack<Integer> stack = new Stack<>();
        int j = 0;
        for (int i = 0 ; i < pushed.length ; i++) {
            stack.push(pushed[i]);
            while(!stack.isEmpty() && stack.peek() == popped[j]){
                stack.pop();
                j++;
            }
        }
        return stack.isEmpty();
    }
    
}
