// Time O(n)
// Space O(26)
316. Remove Duplicate Letters 1081. Smallest Subsequence of Distinct Characters

/*
Find the index of last occurrence for each character.
Use a stack to keep the characters for result.
Use seen boolean arry to record if an item has already pushed to the stack

Loop on each character in the input string S,
if the current character is smaller than the last character in the stack,
and the last character still exists in the following stream,
we can pop the last character to get a smaller result.
*/



class Solution {
    public String smallestSubsequence(String s) {
        Stack<Integer> stack = new Stack<>();
        int[] last = new int[26];
        boolean[] seen = new boolean[26];
        for (int i = 0; i < s.length(); ++i)
            // record the last occurance of each character
            last[s.charAt(i) - 'a'] = i;
        for (int i = 0; i < s.length(); ++i) {
            int c = s.charAt(i) - 'a';
            // don't push duplicated
            if(seen[c]) continue;
            
            // try to see whether we should pop item or items for stack
            while (!stack.isEmpty() && stack.peek() > c && i < last[stack.peek()])
                seen[stack.pop()] = false;
            stack.push(c);
            seen[c] = true;
        }
        StringBuilder sb = new StringBuilder();
        for (int i : stack) sb.append((char)('a' + i));
        return sb.toString();
    }
}
