// use ordeded map
/*

Count number of different cards to a map c
Loop from the smallest card number.
Everytime we meet a new card i, we cut off i - i + W - 1 from the counter.

Time O(MlogM + MW), where M is the number of different cards.

*/
class Solution {
    public boolean isPossibleDivide(int[] nums, int k) {
        Map<Integer, Integer> c = new TreeMap<>();
        for (int i : nums) {
            c.put(i, c.getOrDefault(i, 0) + 1);
        }
        
        for (int it : c.keySet()) {
            if (c.get(it) > 0) {
                // backward, lastly deal with it. it will clear itself
                for (int i = k -1; i >= 0; i--) {
                    if(c.getOrDefault(it + i, 0) < c.get(it)) {
                        return false;
                    } 
                    c.put(it + i, c.get(it + i) - c.get(it));
                }
            }
        }
        return true;
    }
}
