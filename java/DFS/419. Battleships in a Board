// DFS
// iterate entrie board, if X go to dfs and mark connected ones to be T.
// Time O (n), Space O(1)
class Solution {
    public int countBattleships(char[][] board) {
        int m = board.length;
        if (m == 0) return 0;
        int n = board[0].length;
        int res = 0;
        for (int i  = 0; i < m; i ++) {
            for (int j = 0; j < n ; j++) {
                if (board[i][j] == 'X') {
                    res ++; 
                    dfs(board, i, j);
                }
            }
        }
        return res;
    }
    
    private void dfs(char[][] board, int i, int j){
        if (board[i][j] != 'X') return; // single quote
        if (board[i][j] == 'X') {
            board[i][j] = 'T';
            // four direction
            if (i > 0) {
                dfs(board, i-1, j);
            }
            if (i < board.length -1) {
                dfs(board, i+1, j);
            }
            if (j > 0) {
                dfs(board, i, j -1);
            }
            if (j < board[0].length -1) {
                dfs(board, i, j +1 );
            }
        }
        
    }
}



// none dfs 

Going over all cells, we can count only those that are the "first" cell of the battleship. First cell will be defined as the most top-left cell. We can check for first cells by only counting cells that do not have an 'X' to the left and do not have an 'X' above them.


    public int countBattleships(char[][] board) {
        int m = board.length;
        if (m==0) return 0;
        int n = board[0].length;
        
        int count=0;
        
        for (int i=0; i<m; i++) {
            for (int j=0; j<n; j++) {
                if (board[i][j] == '.') continue;
                if (i > 0 && board[i-1][j] == 'X') continue;
                if (j > 0 && board[i][j-1] == 'X') continue;
                count++;
            }
        }
        
        return count;
    }
