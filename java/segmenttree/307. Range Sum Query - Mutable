// segment tree
class NumArray {

    int[] tree;
    int n;
    public NumArray(int[] nums) {
        if (nums.length > 0) {
            n = nums.length;
        }
        tree = new int[n * 2];
        // building tree
        // leaf node equals to original number  
        for (int i = n; i < 2 * n; i++) {
            tree[i] = nums[i - n];
        }
        // reversely adding the sum of two item
        for (int i = n -1; i > 0; i --) {
            tree[i] = tree[2 * i] + tree[2 * i + 1];
        }
        
    }
    
    public void update(int index, int val) {
        // find the corresponding leaf node and update value
        index += n;
        tree[index] = val;
        
        
        // update all its parent
        while (index > 0) {
            int left = index;
            int right = index;
            if (index %2 == 0) {
                right = index + 1;
            } else {
                left = index - 1;
            }
            tree[index/2] = tree[left] + tree[right];
            index /= 2;
        }
    }
    
    public int sumRange(int left, int right) {
        left  += n;
        right +=n;
        
        int rs = 0;
        while (left <= right) {
            if (left % 2 == 1) {
                rs += tree[left];
                left++;
            }
            if (right % 2 == 0) {
                rs += tree[right];
                right--;
            }
            
            left /= 2;
            right /=2;
        }
        return rs;
    }
}

/**
 * Your NumArray object will be instantiated and called as such:
 * NumArray obj = new NumArray(nums);
 * obj.update(index,val);
 * int param_2 = obj.sumRange(left,right);
 */307. Range Sum Query - Mutable
