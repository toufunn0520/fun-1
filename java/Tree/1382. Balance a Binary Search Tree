/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// in order traverse 
// binary search to split the inorder array
// same as 108. Convert Sorted Array to Binary Search Tree



// same as 108. Convert Sorted Array to Binary Search Tree
// Time O(n)
// Space O(n)
class Solution {
    List<TreeNode> array;
    public TreeNode balanceBST(TreeNode root) {
        array = new ArrayList<>();
        inorder(root, array);
        return split(0, array.size()-1);
        
    }
    
    private void inorder(TreeNode node, List<TreeNode> res) {
        if(node == null) return;
        if(node.left != null) {
            inorder(node.left, res);
        }
        res.add(node);
        if(node.right != null) {
            inorder(node.right, res);
        }
    }
    
    TreeNode split (int start , int end){
        if (start > end) return null;
        int mid = start + (end - start)/2;
        TreeNode node = array.get(mid);
        node.left = split(start , mid -1);
        node.right = split(mid +1 , end);
        return node;
    }
    
    
}
