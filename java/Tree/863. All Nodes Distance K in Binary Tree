// Convert the tree to undirectional map
// keep node and its parent in the hashamp
// BFS based on distance, so its left, right, and its parent are next level
// once level == K save all nodes from the BFS queue

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    Map<TreeNode, TreeNode> parent;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        parent = new HashMap<>();
        
        dfs(root, null);
        // undirect map need a set to record seen or not
        Set<TreeNode> seen = new HashSet<>();
        Queue<TreeNode> queue = new LinkedList<>();
        // add target as starter
        seen.add(target);
        queue.add(target);
        List<Integer> res = new ArrayList<>();
        int dist = 0;
        while (!queue.isEmpty()) {
            int size = queue.size();
            if (dist == K) {
                for (TreeNode n: queue) {
                    res.add(n.val);
                }
            }
            // adding its left, right, parent distance +1
            for (int i = 0; i < size; i++) {
                TreeNode node = queue.poll();
                seen.add(node);
                if (node.left != null && !seen.contains(node.left)) {
                    seen.add(node.left);
                    queue.add(node.left);
                }
                if (node.right != null && !seen.contains(node.right)) {
                    seen.add(node.right);
                    queue.add(node.right);
                }
                TreeNode nodeparent = parent.get(node);
                if (nodeparent != null && !seen.contains(nodeparent)) {
                    seen.add(nodeparent);
                    queue.add(nodeparent);
                }
            
            }
            dist ++;
            
            
        }
        return res;
    }
    
    // keep a hashmap from node to its parent, basically convert tree to undirectional graph
    private void dfs(TreeNode node, TreeNode par) {
        if (node != null) {
            parent.put(node, par);
            dfs(node.left, node);
            dfs(node.right, node);
        }
        
    }
}
