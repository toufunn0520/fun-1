/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res =  new LinkedList<List<Integer>>();
        List<Integer> cur = new LinkedList<Integer>();
        helper(res, cur, root, targetSum);
        return res;
    }
    private void helper(List<List<Integer>>res, List<Integer> cur, TreeNode node, int target) {
        
        if(node == null) return;
        
        // valid node 1st adding it to cur
        cur.add(new Integer(node.val));

        // encounter leaf node and sum up to the target
        if(node.left == null && node.right == null && target == node.val) {
            res.add(new LinkedList(cur)); // important
            cur.remove(cur.size() - 1);//don't forget to remove the last integer
            return;
        } else {
            helper(res, cur, node.left, target - node.val);
            helper(res, cur, node.right, target - node.val);
        }
        // if not taking current node, remove it 
        cur.remove(cur.size() -1);
    }
}

