

// post order
// print out the path

//
//Perform a depth-first search, where the recursive function returns the serialization of the tree.
//At each node, record the result in a map, and analyze the map after to determine duplicate subtrees.
//post order
/*

Time Complexity: O(N^2) , where N is the number of nodes in the tree. We visit each node once, but each creation of nodeBasedPath may take O(N) work.
Space Complexity: O(N^2), the size of count.
*/



class Solution {
    Map<String, Integer> count;
    List<TreeNode> ans;
    
    public List<TreeNode> findDuplicateSubtrees(TreeNode root) {
        count = new HashMap<>();
        ans = new ArrayList<>();
        postOrder(root);
        return ans;
    }
    
    public String postOrder(TreeNode node) {
        if (node == null) return "#";
        String nodeBasedPath = node.val + "," + postOrder(node.left) + "," + postOrder(node.right);
        
        count.put(nodeBasedPath, count.getOrDefault(nodeBasedPath, 0) + 1);
        if (count.get(nodeBasedPath) == 2) {
            ans.add(node);
            }
            return nodeBasedPath;
        }
}
