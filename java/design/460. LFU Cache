//one hashmap record <key, value> vals
//one hashmap record <key, freq> counts
//one hashmap record <freq, linkedHashSet> lists
//linkedHashSet is an ordered version of HashSet that maintains a doubly-linked List across all elements.
// global lowest freq -> min, init as -1

// All operation is O(N)

// get
// 1) check if  vals contains target, if not return -1
// 2)  if yes. need to get its originaly counts , increase target counts to freq+1 , remove it from lists given that freq. 
//        add the target to the freq+1 linkedHashSet and add target to (not freq+1 not exits for lists  intialized a new LinkedHashSet)
// also don't forget to update min. If freq == min and list (min) is empty.  min = freq +1
// return val

// set

// if cap is negative return
// if target already exited, update key hashmap and call get(target), returm
// if target not existed, also vals.size >= cap. need to evit min earlist elements, lists(min) iterator to get that removaltarget. 
      remove it from list, count, val hashmap. 
// so this new target fre 1 needs to do (1) update <targe, val > to val hashmap (2) update <target, 1> to count hashmap (3) update min to be 1 
(4) lists.get(1).add(target)   

class LFUCache {
    HashMap<Integer, Integer> vals;
    HashMap<Integer, Integer> counts;
    HashMap<Integer, LinkedHashSet<Integer>> lists;
    int cap;
    int min = -1;
    public LFUCache(int capacity) {
        cap = capacity;
        vals = new HashMap<>();
        counts = new HashMap<>();
        lists = new HashMap<>();
        lists.put(1, new LinkedHashSet<>());
    }
    
    public int get(int key) {
        if(!vals.containsKey(key))
            return -1;
        int count = counts.get(key);
        counts.put(key, count+1);
        lists.get(count).remove(key);
        if(count==min && lists.get(count).size()==0)
            min++;
        if(!lists.containsKey(count+1))
            lists.put(count+1, new LinkedHashSet<>());
        lists.get(count+1).add(key);
        return vals.get(key);
    }
    
    public void put(int key, int value) {
        if(cap<=0)
            return;
        if(vals.containsKey(key)) {
            vals.put(key, value);
            get(key);
            return;
        } 
        if(vals.size() >= cap) {
            int evit = lists.get(min).iterator().next();
            lists.get(min).remove(evit);
            vals.remove(evit);
        }
        vals.put(key, value);
        counts.put(key, 1);
        min = 1;
        lists.get(1).add(key);
    }
}
