class Solution {
    public int minSubArrayLen(int target, int[] nums) {
        if (nums == null || nums.length == 0) return 0;
        int slow = 0;
        int fast = slow;
        int res = nums.length + 1;
        int cur = nums[slow];
        
        while (fast < nums.length) {
            if (cur >= target) {
                res = Math.min(res, fast - slow + 1); 
                cur = cur - nums[slow];
                slow ++;
            } else {
                fast ++;
                if (fast == nums.length) {
                    break;
                }
                cur += nums[fast];
            }
        }
        return res == nums.length + 1 ? 0 : res;
    }
}

public int minSubArrayLen(int s, int[] a) {
  if (a == null || a.length == 0)
    return 0;
  
  int i = 0, j = 0, sum = 0, min = Integer.MAX_VALUE;
  
  while (j < a.length) {
    sum += a[j++];
    
    while (sum >= s) {
      min = Math.min(min, j - i);
      sum -= a[i++];
    }
  }
  
  return min == Integer.MAX_VALUE ? 0 : min;
}
