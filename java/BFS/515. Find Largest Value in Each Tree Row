/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<Integer> largestValues(TreeNode root) {
        List<Integer> res = new ArrayList<>();
        List<TreeNode> bfs = new LinkedList<>();

        // pre-order + bfs
        if (root == null) return res;
    
        bfs.add(root);

        while(!bfs.isEmpty()) {
            int size = bfs.size();
            // level traverse
            int curMax = bfs.get(0).val;
            for (int i = 0; i < size; i++) {
                // same level adding its child if any
                TreeNode node = bfs.remove(0);
                if(node.left != null) bfs.add(node.left);
                if(node.right != null) bfs.add(node.right);
                // update current levl max val
                curMax = Math.max(curMax, node.val);   
            }
            res.add(curMax);
        }
        
        return res;
    }
}

