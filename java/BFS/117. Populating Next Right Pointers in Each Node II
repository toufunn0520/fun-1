/*
// Definition for a Node.
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node next;

    public Node() {}
    
    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, Node _left, Node _right, Node _next) {
        val = _val;
        left = _left;
        right = _right;
        next = _next;
    }
};
*/

class Solution {
    public Node connect(Node root) {
        if (root == null) return root;
        List<Node> bfs = new ArrayList<>();
        bfs.add(root);
        while(!bfs.isEmpty()) {
            int size = bfs.size();
            for (int i = 0; i < size; i++) {
                // last one 
                Node cur = bfs.get(0);
                bfs.remove(0);
                if (i == size -1) {
                    cur.next = null;
                } else {
                    cur.next = bfs.get(0);
                }
                // next level
                if(cur.left !=null) {
                    bfs.add(cur.left);
                }
                if(cur.right !=null) {
                    bfs.add(cur.right);
                }
            }
        }
        return root;
    }
}
