// convert the question how to define p and s are permutation. (abba) -> {a:2, b:2} if p and s have the same occurance
// sliding window s2(longer one) and modify freq (count) til they fully matched
// Time (l1 + 26 *(l1-l2)). where l_1l  is the length of string l_1l and l_2l is the length of string l_2l 
//Space O(1)
class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length(), len2 = s2.length();
        if (len1 > len2) return false;
        
        int[] count = new int[26];
        for (int i = 0; i < len1; i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        // first len1 is a permutation
        if (allZero(count)) return true;
        
        // sliding window, moving right  minus freq, and vice versa
        for (int i = len1; i < len2; i++) {
            count[s2.charAt(i) - 'a']--;
            count[s2.charAt(i - len1) - 'a']++;
            if (allZero(count)) return true;
        }
        
        return false;
        
    }
        private boolean allZero(int[] count) {
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) return false;
        }
        return true;
    }
}
