/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
 
 // merge sort top->down merge sort
 // divide -> split the list to half keep spilt it till it only contains one element, find the mid of the list and cut the 1st half last element next point to null
 // conque -> merge two list and return single list in sorted order, use dummy pointer to keep a dummy header 
 
 // Time (ON*logN)
 // Space (logN)
 
class Solution {
    public ListNode sortList(ListNode head) {
        // edge case, leaf node
        if (head == null || head.next == null) {
            return head;
        }
        
        // split, use two pointers one fast one slow
        ListNode prevSlow = null;
        ListNode slow = head;
        ListNode fast = head;
        while (fast != null && fast.next !=null) {
            prevSlow = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        // cut the 1st list end element point it to null
        prevSlow.next = null;
        // slow is point to the 2nd half, e.g 1-> 3 ->2 ->4 slow is 2, 1 ->2 ->3->4 ->5  slow is 3
        ListNode left = sortList(head);
        ListNode right = sortList(slow);
        return merge(left, right);     
        // merge
    }
    
    // compare and sort two list into one list in asending order
    private ListNode merge(ListNode l1, ListNode l2) {
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }
        // dummmy node as the temp head
        ListNode dummy = new ListNode();
        ListNode next = new ListNode();
        dummy = next;
        while(l1 != null && l2 != null) {
            if (l1.val <= l2.val) {
                next.next = l1;
                next = next.next;
                l1 = l1.next;
            } else {
                next.next = l2;
                next = next.next;
                l2 = l2.next;
            }
        }
        if (l1 == null) {
            next.next = l2;
        }
        
        if(l2 == null) {
            next.next = l1;
        }
        return dummy.next;
    }
}
